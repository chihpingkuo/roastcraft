<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="{{ url_for('static', path='/tailwind-output.css') }}" rel="stylesheet" type="text/css"/>
    
    {# https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css #}
    <link href="{{ url_for('static', path='/daisyui.4.12.10.full.min.css') }}" rel="stylesheet" type="text/css"/>
    
    <script type="importmap">
      {
        "imports": {
          "vue": "{{ url_for('static', path='/lib/vue.esm-browser.prod.3.4.34.js') }}"
        }
      }
    </script>

    {# https://cdn.jsdelivr.net/npm/d3@7.9.0/dist/d3.min.js #}
    <script src="{{ url_for('static', path='/lib/d3.7.9.0.min.js') }}"></script>

    {# https://cdn.socket.io/4.7.5/socket.io.min.js #}
    <script src="{{ url_for('static', path='/lib/socket.io.4.7.5.min.js') }}"></script>
    
    <script>
      let settings = {{ctx_settings|tojson}};
      console.log(settings);
      let appstatus_init = "{{ctx_appstatus.name}}";
      console.log(appstatus_init);
    </script>

    <script type="module" src="{{ url_for('static', path='/index.js') }}"></script>
  </head>
  <body>
    <div id="app" class="flex gap-1">
      <svg id="main_chart" :width="width" :height="height">

        <defs>
          <clipPath
              clipPathUnits="userSpaceOnUse"
              id="clip-path">
              <rect :x="marginLeft" :y="marginTop" :width="width - marginRight - marginLeft" :height="height - marginTop - marginBottom" />
          </clipPath>
        </defs>

        <!-- axis -->
        <g v-x_axis :transform="`translate(0,${height - marginBottom})`"></g>
        <g v-y_axis :transform="`translate(${marginLeft},0)`"></g>
        <g v-y_axis_inlet :transform="`translate(${marginLeft},0)`"></g>
        <g v-y_axis_ror :transform="`translate(${width - marginRight},0)`"></g>

        <g v-for="tick in yScale.ticks().slice(1, yScale.ticks().length)">
          <line
            stroke="black"
            stroke-width=0.5
            stroke-opacity=0.4
            stroke-dasharray="2 2"
            :x1="marginLeft + 20"
            :x2="width - marginRight"
            :y1="yScale(tick)"
            :y2="yScale(tick)"
          ></line>
        </g>
        <g clip-path="url(#clip-path)">
          <!-- BT curve -->
          <path 
            fill="none" 
            stroke-width=1.5 
            :stroke="store.channels[0].color" 
            :d="line(store.channels[0].data)">
          </path>

          <!-- ET curve -->
          <path 
            fill="none" 
            stroke-width=1.5 
            :stroke="store.channels[1].color" 
            :d="line(store.channels[1].data)">
          </path>

          <!-- INLET curve -->
          <path 
            fill="none" 
            stroke-width=1.5   
            :stroke="store.channels[2].color" 
            :d="lineInlet(store.channels[2].data)">
          </path>

          <!-- ROR curves -->
          <path v-if="showROR"
            fill="none" 
            stroke-width=1.5 
            stroke="#2E8B57"
            :d="lineROR(store.channels[0].ror)" 
            >
          </path>
          <path 
            fill="none" 
            stroke-width=1.5 
            stroke="#0000FF"
            :d="lineROR(store.channels[0].ror_smoothed)" 
            >
          </path>
        </g>       
        
        <text v-if="toolTipLabels.length > 0" v-for="tooltip in toolTipLabels"
            alignment-baseline="middle"
            font-size="small"
            :x="tooltip.x"
            :y="tooltip.y" 
        >${tooltip.label}</text>

        <!-- roast events -->
        <g v-for="re in Object.keys(store.roast_events).map((key)=>({id: key, index: store.roast_events[key]}))">
          <circle
            r=2
            :cx="xScale(store.channels[0].data[re.index].time)"
            :cy="yScale(store.channels[0].data[re.index].value)"
          ></circle>
          <line
            stroke="black"
            stroke-width=1
            :x1="xScale(store.channels[0].data[re.index].time)-2"
            :y1="yScale(store.channels[0].data[re.index].value)-4" 
            :x2="xScale(store.channels[0].data[re.index].time)-10"
            :y2="yScale(store.channels[0].data[re.index].value)-20" 
          ></line>
          <text
            alignment-baseline="baseline"
            text-anchor="middle"
            font-size="small"
            :x="xScale(store.channels[0].data[re.index].time)-10"
            :y="yScale(store.channels[0].data[re.index].value)-22" 
          >${re.id}  ${store.channels[0].data[re.index].value.toFixed(1)}°</text>
          <line
            stroke="black"
            stroke-width=1
            :x1="xScale(store.channels[0].data[re.index].time)-2"
            :y1="yScale(store.channels[0].data[re.index].value)+4" 
            :x2="xScale(store.channels[0].data[re.index].time)-10"
            :y2="yScale(store.channels[0].data[re.index].value)+20" 
          ></line>
          <text
            alignment-baseline="hanging"
            text-anchor="end"
            font-size="small"
            :x="xScale(store.channels[0].data[re.index].time)-10"
            :y="yScale(store.channels[0].data[re.index].value)+22" 
          >${time_format(store.channels[0].data[re.index].time)}</text>
        </g>

        <!-- gas channel -->
        <path v-if="store.gas_channel.data != undefined"
          fill="none" 
          stroke-width=1.5 
          stroke="#922b21"
          :d="lineGas([...store.gas_channel.data, {time:timer, value:store.gas_channel.current_data}])" 
          >
        </path>
        <g v-if="store.gas_channel.data != undefined" v-for="point in store.gas_channel.data">
          <text
              alignment-baseline="baseline"
              text-anchor="start"
              font-size="10px"
              :x="xScale(point.time)+2"
              :y="yScaleGas(point.value)-2" 
            >${point.value}</text>
        </g>
        <!-- first crack reference -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="green"
          :cx="xScale(60*9)"
          :cy="yScale(195)"
        ></circle>
        <!-- dry end reference -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="green"
          :cx="xScale(60*4.5)"
          :cy="yScale(150)"
        ></circle>
        <!-- BT extrapolation -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="blue"
          :cx="xScale(timer+30)"
          :cy="yScale(store.channels[0].current_data + store.channels[0].current_ror/2)"
        ></circle>
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="blue"
          :cx="xScale(timer+60)"
          :cy="yScale(store.channels[0].current_data + store.channels[0].current_ror)"
        ></circle>
        
      </svg>
      
      <div class="">
        
        <div class="flex gap-1 mt-1">
          <div class="flex items-center justify-center bg-black text-white rounded text-2xl font-extrabold w-24">
            ${timer_str}
          </div>
          ${appStatus}
        </div>
        <div class="flex gap-1 mt-1">
          <button v-if="appStatus == 'OFF'"
            class="btn"
            @click="socket.emit('reset', '')"
          >
            Reset
          </button>
          <button v-if="appStatus == 'OFF'"
            class="btn"
            @click="socket.emit('on', '')"
          >
            On
          </button>
          <button v-if="appStatus == 'ON'"
            class="btn"
            @click="socket.emit('off', '')"
          >
            Off
          </button>
          <button v-if="appStatus == 'ON'"
            class="btn"
            @click="socket.emit('start', '')"
          >
            Start
          </button>
          <button v-if="appStatus == 'RECORDING'"
            class="btn"
            @click="socket.emit('stop', '')"
          >
            Stop
          </button>
        </div>

        <div class="flex gap-1 mt-1">  
          <div class="bg-base-300 rounded text-right w-20 px-1" v-for="channel in store.channels">
            <p>${channel.id}</p>
            <p class="text-2xl leading-tight text-red-600"
               >${channel.current_data.toFixed(1)}
            </p>
          </div>
          
        </div>
        {# ror #}
        <div class="flex gap-1 mt-1">
          <div class="bg-base-300 rounded text-right w-20 px-1">
            <p>${'Δ' + store.channels[0].id}</p>
            <p class="text-2xl leading-tight text-blue-600"
               >${store.channels[0].current_ror.toFixed(1)}
            </p>
          </div>  
        </div>
        {# phases #}
        <div class="flex gap-1 mt-1">
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dry.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Drying</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dry.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dry.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.mai.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Maillard</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.mai.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.mai.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dev.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Develop</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dev.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dev.percent.toFixed(1)}%</p>
          </div>    
          
        </div>
        <!-- roast event buttons -->
        <div class="flex gap-1 mt-1">
          <button 
            :class="['btn', ('C' in store.roast_events) ? 'btn-disabled' : '']"
            @click="socket.emit('charge', 'charge')"
          >
            Charge
          </button>
          <button 
            class="btn"
            @click="socket.emit('charge', 'to_left')"
          >
            <
          </button>
          <button 
            class="btn"
            @click="socket.emit('charge', 'to_right')"
          >
            >
          </button>
          <button 
            :class="['btn', ('FC' in store.roast_events) ? 'btn-disabled' : '']"
            @click="socket.emit('first_crack', '')"
          >
            FC
          </button>
          <button 
            :class="['btn', ('D' in store.roast_events) ? 'btn-disabled' : '']"
            @click="socket.emit('drop', '')"
          >
            Drop
          </button>
          
        </div>

        {# range slider #}
        <div class="my-4 relative">
          <span class="absolute -translate-x-1/2 -translate-y-4" 
            :style="{left: (3+96/(pips[pips.length-1]-pips[0])*gasBubble)-pips[0]+'%'}">${gasBubble}</span>
          <input
            type="range"
            class="w-full accent-blue-700 m-0"
            :min="pips[0]"
            :max="pips[pips.length-1]"
            v-model="gasBubble"
            @change="event => gasValue = event.target.value"
            step=5
            list="values"
          />
          <datalist id="values" class="w-full flex justify-between text-xs p-0 relative">
            <option v-for="pip in pips"
              class="absolute hover:cursor-pointer -translate-x-1/2" 
              :style="{left: (3+96/(pips[pips.length-1]-pips[0])*pip)-pips[0]+'%'}"
              :value="pip" 
              :label="pip"
              @click="gasBubble = pip ; gasValue = pip"
              >
            </option>
          </datalist>
        </div>
        
        <table class="w-full font-['Consolas'] divide-y text-right "> 
          <thead>
          <tr class="">
            <th><pre>max</pre></th>
            <th class="bg-slate-200"><pre>150 160</pre></th>
            <th><pre>170 180</pre></th>
            <th class="bg-slate-200"><pre>188 FC</pre></th>
            <th><pre>10%</pre></th>
          </tr>
          </thead>
          <tbody class="divide-y divide-dashed">
            <tr>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-1"/>
                  <pre>A4 110</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-2"/>
                  <pre>B4 100 85</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-3"/>
                  <pre>C4 70  55</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-4"/>
                  <pre>D4 40 35</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <pre></pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-1"/>
                  <pre>A3 105</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-2"/>
                  <pre>B3  95 80</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-3"/>
                  <pre>C3 65  50</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-4"/>
                  <pre>D3 35 30</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <pre></pre>
                </div>
              </td>  
            </tr> 
            <tr>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-1" checked="checked"/>
                  <pre>A2 100</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-2" checked="checked"/>
                  <pre>B2  90 75</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-3" checked="checked"/>
                  <pre>C2 60  45</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-4" checked="checked"/>
                  <pre>D2 30 25</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-5" checked="checked"/>
                  <pre>E2 20</pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-1"/>
                  <pre>A1  95</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-2"/>
                  <pre>B1  85 70</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-3"/>
                  <pre>C1 55  40</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-4"/>
                  <pre>D1 25 20</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-5"/>
                  <pre>E1 15</pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-1"/>
                  <pre>A0  90</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-2"/>
                  <pre>B0  80 65</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-3"/>
                  <pre>C0 50  35</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end">
                  <input type="radio" name="radio-4"/>
                  <pre>D0 20 15</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end">
                  <input type="radio" name="radio-5"/>
                  <pre>E0 10</pre>
                </div>
              </td>  
            </tr> 
          </tbody>
        </table>
      </div>
    </div>

    
  </body>
</html>
