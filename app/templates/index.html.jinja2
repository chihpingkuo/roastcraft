<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="{{ url_for('static', path='/tailwind-output.css') }}" rel="stylesheet" type="text/css"/>
    
    {# https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css #}
    <link href="{{ url_for('static', path='/daisyui.4.12.10.full.min.css') }}" rel="stylesheet" type="text/css"/>
    
    <script type="importmap">
      {
        "imports": {
          "vue": "{{ url_for('static', path='/lib/vue.esm-browser.prod.3.4.34.js') }}"
        }
      }
    </script>

    {# https://unpkg.com/htmx.org@2.0.0 #}
    <script type="module" src="{{ url_for('static', path='/lib/htmx.2.0.0.min.js') }}"></script>

    {# https://cdn.jsdelivr.net/npm/d3@7.9.0/dist/d3.min.js #}
    <script src="{{ url_for('static', path='/lib/d3.7.9.0.min.js') }}"></script>

    {# https://cdn.socket.io/4.7.5/socket.io.min.js #}
    <script src="{{ url_for('static', path='/lib/socket.io.4.7.5.min.js') }}"></script>
    
    <script>
      let settings = {{ctx_settings|tojson}};
      console.log(settings);
    </script>

    <script type="module" src="{{ url_for('static', path='/index.js') }}"></script>
  </head>
  <body>
    <div id="app" class="flex gap-1">
      <div class="">
        <svg id="main_chart" :width="width" :height="height">
          <g v-x_axis :transform="`translate(0,${height - marginBottom})`"></g>
          <g v-y_axis :transform="`translate(${marginLeft},0)`"></g>
          <g v-y_axis_ror :transform="`translate(${width - marginRight},0)`"></g>
          <path v-for="channel in store.channels" 
            fill="none" 
            stroke-width=1.5 
            :stroke="channel.color" 
            :d="line(channel.data)">
          </path>
          <path v-if="showROR"
            fill="none" 
            stroke-width=1.5 
            stroke="#2E8B57"
            :d="lineROR(store.channels[0].ror)" 
            >
          </path>
          <path 
            fill="none" 
            stroke-width=1.5 
            stroke="#0000FF"
            :d="lineROR(store.channels[0].ror_smoothed)" 
            >
          </path>
          <g v-for="re in store.roast_events">
            <circle
              r=2
              :cx="xScale(store.channels[0].data[re.index].time)"
              :cy="yScale(store.channels[0].data[re.index].value)"
            ></circle>
            <line
              stroke="black"
              stroke-width=1
              :x1="xScale(store.channels[0].data[re.index].time)+2"
              :y1="yScale(store.channels[0].data[re.index].value)+2" 
              :x2="xScale(store.channels[0].data[re.index].time)+10"
              :y2="yScale(store.channels[0].data[re.index].value)+10" 
            ></line>
            <text
              alignment-baseline="hanging"
              font-size="small"
              :x="xScale(store.channels[0].data[re.index].time)+10"
              :y="yScale(store.channels[0].data[re.index].value)+10" 
            >${re.id}</text>
          </g>
        </svg>
      </div>
      <div class="">
        <div class="flex gap-1 mt-1">
          <div class="flex items-center justify-center bg-black text-white rounded text-2xl font-extrabold w-24">
            ${timer}
          </div>
        </div>
        <div class="flex gap-1 mt-1">
          <button
            class="btn"
            hx-post="/on"
            hx-trigger="click"
            hx-target="closest div"
            hx-swap="outerHTML"
          >
            on
          </button>
        </div>
        <div class="flex gap-1 mt-1">  
          <div class="bg-base-300 rounded text-right w-20 px-1" v-for="channel in store.channels">
            <p>${channel.id}</p>
            <p class="text-2xl leading-tight text-red-600"
               >${channel.current_data}
            </p>
          </div>
          
        </div>
        {# ror #}
        <div class="flex gap-1 mt-1">
          <div class="bg-base-300 rounded text-right w-20 px-1" v-for="channel in store.channels">
            <p>${'Δ' + channel.id}</p>
            <p class="text-2xl leading-tight text-blue-600"
               >${channel.current_ror.toFixed(1)}
            </p>
          </div>  
        </div>
        {# phases #}
        <div class="flex gap-1 mt-1">
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dry.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Drying</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dry.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dry.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.mai.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Maillard</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.mai.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.mai.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-base-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dev.temp_rise.toFixed(1)}°</p>
            <p class="col-span-2 text-right text-base">Develop</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dev.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dev.percent.toFixed(1)}%</p>
          </div>    
          
        </div>
        {# events #}
        <div class="flex gap-1 mt-1">
          <button
            class="btn"
            hx-post="/charge"
            hx-trigger="click"
            hx-target="this"
            hx-swap="outerHTML"
          >
            charge
          </button>
          <button
            class="btn"
            hx-post="/charge/toLeft"
            hx-trigger="click"
            hx-swap="none"
          >
            <
          </button>
          <button
            class="btn"
            hx-post="/charge/toRight"
            hx-trigger="click"
            hx-swap="none"
          >
            >
          </button>
        </div>
        <div class="flex gap-1 mt-1">
          
          <button
            class="btn"
            hx-post="/fc"
            hx-trigger="click"
            hx-target="this"
            hx-swap="outerHTML"
          >
            FC
          </button>
          <button
            class="btn"
            hx-post="/drop"
            hx-trigger="click"
            hx-target="this"
            hx-swap="outerHTML"
          >
            drop
          </button>
        </div>

        {# range slider #}
        <div class="my-4 relative">
          <span class="absolute -translate-x-1/2 -translate-y-4" 
            :style="{left: (2+96/pips[pips.length-1]*gasBubble)+'%'}">${gasBubble}</span>
          <input
            type="range"
            class="w-full accent-blue-700 m-0"
            :min="pips[0]"
            :max="pips[pips.length-1]"
            v-model="gasBubble"
            @change="event => gasValue = event.target.value"
            step=5
            list="values"
          />
          <datalist id="values" class="w-full flex justify-between text-xs p-0 relative">
            <option v-for="pip in pips"
              class="absolute hover:cursor-pointer -translate-x-1/2" 
              :style="{left: (2+96/pips[pips.length-1]*pip)+'%'}"
              :value="pip" 
              :label="pip"
              @click="gasBubble = pip ; gasValue = pip"
              >
            </option>
          </datalist>
        </div>

      </div>
    </div>

    
  </body>
</html>
