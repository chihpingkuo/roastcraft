<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="{{ url_for('static', path='/tailwind-output.css') }}" rel="stylesheet" type="text/css"/>

    <link href="https://cdn.jsdelivr.net/npm/flowbite@2.5.1/dist/flowbite.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/flowbite@2.5.1/dist/flowbite.min.js"></script>
    
    <script type="importmap">
      {
        "imports": {
          "vue": "{{ url_for('static', path='/lib/vue.esm-browser.prod.3.4.34.js') }}"
        }
      }
    </script>

    {# https://cdn.jsdelivr.net/npm/d3@7.9.0/dist/d3.min.js #}
    <script src="{{ url_for('static', path='/lib/d3.7.9.0.min.js') }}"></script>

    {# https://cdn.socket.io/4.7.5/socket.io.min.js #}
    <script src="{{ url_for('static', path='/lib/socket.io.4.7.5.min.js') }}"></script>
    
    <script>
      let settings = {{ctx_settings|tojson}};
      console.log(settings);
      let appstatus_init = "{{ctx_appstatus.name}}";
      console.log(appstatus_init);
    </script>

    <script type="module" src="{{ url_for('static', path='/index.js') }}"></script>
  </head>
  <body>
    
    <div id="app" class="flex gap-1">
      <svg id="main_chart" :width="width" :height="height">

        <defs>
          <clipPath
              clipPathUnits="userSpaceOnUse"
              id="clip-path">
              <rect :x="marginLeft" :y="marginTop" :width="width - marginRight - marginLeft" :height="height - marginTop - marginBottom" />
          </clipPath>
        </defs>

        <!-- axis -->
        <g v-x_axis :transform="`translate(0,${height - marginBottom})`"></g>
        <g v-y_axis :transform="`translate(${marginLeft},0)`"></g>
        <g v-y_axis_inlet :transform="`translate(${marginLeft},0)`"></g>
        <g v-y_axis_ror :transform="`translate(${width - marginRight},0)`"></g>

        <g v-for="tick in yScale.ticks().slice(1, yScale.ticks().length)">
          <line
            stroke="black"
            stroke-width=0.5
            stroke-opacity=0.4
            stroke-dasharray="2 2"
            :x1="marginLeft + 20"
            :x2="width - marginRight"
            :y1="yScale(tick)"
            :y2="yScale(tick)"
          ></line>
        </g>
        <g clip-path="url(#clip-path)">
          <!-- BT curve -->
          <path 
            fill="none" 
            stroke-width=1.5 
            :stroke="store.channels[0].color" 
            :d="line(store.channels[0].data)">
          </path>

          <!-- ET curve -->
          <path 
            fill="none" 
            stroke-width=1.5 
            :stroke="store.channels[1].color" 
            :d="line(store.channels[1].data)">
          </path>

          <!-- INLET curve -->
          <path 
            fill="none" 
            stroke-width=1.5   
            :stroke="store.channels[2].color" 
            :d="lineInlet(store.channels[2].data)">
          </path>

          <!-- ROR curves -->
          <path v-if="showROR"
            fill="none" 
            stroke-width=1.5 
            stroke="#2E8B57"
            :d="lineROR(store.channels[0].ror)" 
            >
          </path>
          <path 
            fill="none" 
            stroke-width=1.5 
            stroke="#0000FF"
            :d="lineROR(store.channels[0].ror_smoothed)" 
            >
          </path>
        </g>       
        
        <text v-if="toolTipLabels.length > 0" v-for="tooltip in toolTipLabels"
            alignment-baseline="middle"
            font-size="small"
            :x="tooltip.x"
            :y="tooltip.y" 
        >${tooltip.label}</text>

        <!-- roast events -->
        <g v-for="re in Object.keys(store.roast_events).map((key)=>({id: key, index: store.roast_events[key]}))">
          <circle
            r=2
            :cx="xScale(store.channels[0].data[re.index].time)"
            :cy="yScale(store.channels[0].data[re.index].value)"
          ></circle>
          <line
            stroke="black"
            stroke-width=1
            :x1="xScale(store.channels[0].data[re.index].time)-2"
            :y1="yScale(store.channels[0].data[re.index].value)-4" 
            :x2="xScale(store.channels[0].data[re.index].time)-10"
            :y2="yScale(store.channels[0].data[re.index].value)-20" 
          ></line>
          <text
            alignment-baseline="baseline"
            text-anchor="middle"
            font-size="small"
            :x="xScale(store.channels[0].data[re.index].time)-10"
            :y="yScale(store.channels[0].data[re.index].value)-22" 
          >${re.id}  ${store.channels[0].data[re.index].value.toFixed(1)}Â°</text>
          <line
            stroke="black"
            stroke-width=1
            :x1="xScale(store.channels[0].data[re.index].time)-2"
            :y1="yScale(store.channels[0].data[re.index].value)+4" 
            :x2="xScale(store.channels[0].data[re.index].time)-10"
            :y2="yScale(store.channels[0].data[re.index].value)+20" 
          ></line>
          <text
            alignment-baseline="hanging"
            text-anchor="end"
            font-size="small"
            :x="xScale(store.channels[0].data[re.index].time)-10"
            :y="yScale(store.channels[0].data[re.index].value)+22" 
          >${time_format(store.channels[0].data[re.index].time)}</text>
        </g>

        <!-- gas channel -->
        <path v-if="store.gas_channel.data != undefined"
          fill="none" 
          stroke-width=1.5 
          stroke="#922b21"
          :d="lineGas([...store.gas_channel.data, {time:timer, value:store.gas_channel.current_data}])" 
          >
        </path>
        <g v-if="store.gas_channel.data != undefined" v-for="point in store.gas_channel.data">
          <text
              alignment-baseline="baseline"
              text-anchor="start"
              font-size="10px"
              :x="xScale(point.time)+2"
              :y="yScaleGas(point.value)-2" 
            >${point.value}</text>
        </g>
        <!-- first crack reference -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="green"
          :cx="xScale(60*9)"
          :cy="yScale(195)"
        ></circle>
        <!-- dry end reference -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="green"
          :cx="xScale(60*4.5)"
          :cy="yScale(150)"
        ></circle>
        <!-- BT extrapolation -->
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="blue"
          :cx="xScale(timer+30)"
          :cy="yScale(store.channels[0].current_data + store.channels[0].current_ror/2)"
        ></circle>
        <circle
          r=3
          fill="none" 
          stroke-width=1 
          stroke="blue"
          :cx="xScale(timer+60)"
          :cy="yScale(store.channels[0].current_data + store.channels[0].current_ror)"
        ></circle>
        
      </svg>
      
      <div class="">
        
        <div class="flex gap-1 mt-1">
          <button class="text-white bg-gray-900 font-extrabold rounded-lg text-2xl px-5 py-2.5" type="button" disabled>
          ${timer_str}
          </button>
          <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" type="button" data-drawer-target="drawer-right-example" data-drawer-show="drawer-right-example" data-drawer-placement="right" aria-controls="drawer-right-example">
          Settings
          </button>
          
        </div>
        <div class="flex gap-1 mt-1">
          <button v-if="appStatus == 'OFF'"
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
            @click="socket.emit('reset', '')"
          >
            Reset
          </button>
          <button v-if="appStatus == 'OFF'"
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
            @click="socket.emit('on', '')"
          >
            On
          </button>
          <button v-if="appStatus == 'ON'"
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
            @click="socket.emit('off', '')"
          >
            Off
          </button>
          <button v-if="appStatus == 'ON'"
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
            @click="socket.emit('start', '')"
          >
            Start
          </button>
          <button v-if="appStatus == 'RECORDING'"
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
            @click="socket.emit('stop', '')"
          >
            Stop
          </button>
        </div>

        <div class="flex gap-1 mt-1">  
          <div class="bg-gray-200 rounded text-right w-20 px-1" v-for="channel in store.channels">
            <p>${channel.id}</p>
            <p class="text-2xl leading-tight text-red-600"
               >${channel.current_data.toFixed(1)}
            </p>
          </div>
          <div class="bg-gray-200 rounded text-right w-20 px-1">
            <p>${'Î' + store.channels[0].id}</p>
            <p class="text-2xl leading-tight text-blue-600"
               >${store.channels[0].current_ror.toFixed(1)}
            </p>
          </div> 
        </div>
        
        {# phases #}
        <div class="flex gap-1 mt-1">
          <div class="grid grid-cols-3 bg-gray-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dry.temp_rise.toFixed(1)}Â°</p>
            <p class="col-span-2 text-right text-base">Drying</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dry.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dry.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-gray-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.mai.temp_rise.toFixed(1)}Â°</p>
            <p class="col-span-2 text-right text-base">Maillard</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.mai.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.mai.percent.toFixed(1)}%</p>
          </div>  
          <div class="grid grid-cols-3 bg-gray-300 rounded w-32 px-1 text-xl" > 
            <p class="col-span-1">${store.phases.dev.temp_rise.toFixed(1)}Â°</p>
            <p class="col-span-2 text-right text-base">Develop</p>
            <p class="col-span-1 text-red-600 ">${time_format(store.phases.dev.time)}</p>  
            <p class="col-span-2 text-right text-blue-600">${store.phases.dev.percent.toFixed(1)}%</p>
          </div>    
          
        </div>
        <!-- roast event buttons -->
        <div class="flex gap-1 mt-1">
          <button 
            type="button"
            :class="['py-2.5 px-5 text-sm font-medium focus:outline-none bg-white rounded-lg border border-gray-200 focus:z-10 focus:ring-4 focus:ring-gray-100',
                    ('C' in store.roast_events) ? 'text-gray-200' : 'text-gray-900 hover:bg-gray-100 hover:text-blue-700']"
            :disabled ="'C' in store.roast_events"
            @click="socket.emit('charge', 'charge')"
          >
            Charge
          </button>
          <button 
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100"
            @click="socket.emit('charge', 'to_left')"
          >
            <
          </button>
          <button 
            type="button"
            class="py-2.5 px-5 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100"
            @click="socket.emit('charge', 'to_right')"
          >
            >
          </button>
          <button 
            type="button"
            :class="['py-2.5 px-5 text-sm font-medium focus:outline-none bg-white rounded-lg border border-gray-200 focus:z-10 focus:ring-4 focus:ring-gray-100',
                    ('FC' in store.roast_events) ? 'text-gray-200' : 'text-gray-900 hover:bg-gray-100 hover:text-blue-700']"
            :disabled ="'FC' in store.roast_events"
            @click="socket.emit('first_crack', '')"
          >
            FC
          </button>
          <button 
            type="button"
            :class="['py-2.5 px-5 text-sm font-medium focus:outline-none bg-white rounded-lg border border-gray-200 focus:z-10 focus:ring-4 focus:ring-gray-100',
                    ('D' in store.roast_events) ? 'text-gray-200' : 'text-gray-900 hover:bg-gray-100 hover:text-blue-700']"
            :disabled ="'D' in store.roast_events"
            @click="socket.emit('drop', '')"
          >
            Drop
          </button>
          
        </div>

        {# range slider #}
        <div class="my-4 relative">
          <span class="absolute -translate-x-1/2 -translate-y-4" 
            :style="{left: (3+96/(pips[pips.length-1]-pips[0])*gasBubble)-pips[0]+'%'}">${gasBubble}</span>
          <input
            type="range"
            class="w-full accent-blue-700 m-0"
            :min="pips[0]"
            :max="pips[pips.length-1]"
            v-model="gasBubble"
            @change="event => gasValue = event.target.value"
            step=5
            list="values"
          />
          <datalist id="values" class="w-full flex justify-between text-xs p-0 relative">
            <option v-for="pip in pips"
              class="absolute hover:cursor-pointer -translate-x-1/2" 
              :style="{left: (3+96/(pips[pips.length-1]-pips[0])*pip)-pips[0]+'%'}"
              :value="pip" 
              :label="pip"
              @click="gasBubble = pip ; gasValue = pip"
              >
            </option>
          </datalist>
        </div>
        
        <table class="w-full font-['Consolas'] divide-y text-right "> 
          <thead>
          <tr class="">
            <th><pre>max</pre></th>
            <th class="bg-slate-200"><pre>150 160</pre></th>
            <th><pre>170 180</pre></th>
            <th class="bg-slate-200"><pre>188 FC</pre></th>
            <th><pre>10%</pre></th>
          </tr>
          </thead>
          <tbody class="divide-y divide-dashed">
            <tr>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-1" class="w-3 h-3"/>
                  <pre> 110</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-2" class="w-3 h-3"/>
                  <pre> 100  85</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-3" class="w-3 h-3"/>
                  <pre> 70  55</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-4" class="w-3 h-3"/>
                  <pre> 40 35</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <pre></pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-1" class="w-3 h-3"/>
                  <pre> 105</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-2" class="w-3 h-3"/>
                  <pre>  95  80</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-3" class="w-3 h-3"/>
                  <pre> 65  50</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-4" class="w-3 h-3"/>
                  <pre> 35 30</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <pre></pre>
                </div>
              </td>  
            </tr> 
            <tr>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-1" class="w-3 h-3" checked="checked"/>
                  <pre> 100</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-2" class="w-3 h-3" checked="checked"/>
                  <pre>  90  75</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-3" class="w-3 h-3" checked="checked"/>
                  <pre> 60  45</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-4" class="w-3 h-3" checked="checked"/>
                  <pre> 30 25</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-5" class="w-3 h-3" checked="checked"/>
                  <pre> 20</pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-1" class="w-3 h-3"/>
                  <pre>  95</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-2" class="w-3 h-3"/>
                  <pre>  85  70</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-3" class="w-3 h-3"/>
                  <pre> 55  40</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-4" class="w-3 h-3"/>
                  <pre> 25 20</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-5" class="w-3 h-3"/>
                  <pre> 15</pre>
                </div>
              </td>  
            </tr>
            <tr>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-1" class="w-3 h-3"/>
                  <pre>  90</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-2" class="w-3 h-3"/>
                  <pre>  80  65</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-3" class="w-3 h-3"/>
                  <pre> 50  35</pre>
                </div>
              </td>
              <td class="bg-slate-200">
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-4" class="w-3 h-3"/>
                  <pre> 20 15</pre>
                </div>
              </td>
              <td>
                <div class="flex justify-end items-center">
                  <input type="radio" name="radio-5" class="w-3 h-3"/>
                  <pre> 10</pre>
                </div>
              </td>  
            </tr> 
          </tbody>
        </table>
        <!-- drawer component -->
        <div id="drawer-right-example" class="fixed top-0 right-0 z-40 h-screen p-4 overflow-y-auto transition-transform translate-x-full bg-white w-80 dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-right-label">
            <h5 id="drawer-right-label" class="inline-flex items-center mb-4 text-base font-semibold text-gray-500 dark:text-gray-400"><svg class="w-4 h-4 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/>
          </svg>Right drawer</h5>
          <button type="button" data-drawer-hide="drawer-right-example" aria-controls="drawer-right-example" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white" >
              <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
              </svg>
              <span class="sr-only">Close menu</span>
          </button>
          <p class="mb-6 text-sm text-gray-500 dark:text-gray-400">Supercharge your hiring by taking advantage of our <a href="#" class="text-blue-600 underline font-medium dark:text-blue-500 hover:no-underline">limited-time sale</a> for Flowbite Docs + Job Board. Unlimited access to over 190K top-ranked candidates and the #1 design job board.</p>
          <div class="grid grid-cols-2 gap-4">
              <a href="#" class="px-4 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-200 rounded-lg focus:outline-none hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">Learn more</a>
              <a href="#" class="inline-flex items-center px-4 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Get access <svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
          </svg></a>
          </div>
        </div>
      </div>
    </div>

    
  </body>
</html>
